crystal_doc_search_index_callback({"repository_name":"fluxite","body":"# Fluxite\n\nFluxite is a reactivity/reactive streams-ish library for Crystal. The main feature is that it\nuses a message queue instead of recursion allowing (potentially) unbounded feedback.\n\n```crystal\nworld = Fluxite::Port(Symbol).new\nworld.select(:tick).map { :tock }.into(world)\nworld.select(:tock).map { :tick }.into(world)\nworld.each { |sym| p! sym }\n\nFluxite.pass(world, :tick)\n\n# STDOUT:\n#   sym # => :tick\n#   sym # => :tock\n#   sym # => :tick\n#   sym # => :tock\n#   sym # => :tick\n#   sym # => :tock\n# ... forever\n```\n\nAlso message propagation is much more intuitive than in more naive reactive streams implementations,\nand is more like circuits (Fluxite is breadth-first vs. depth-first naive reactive systems). That is,\nprogress is made across the entire level of the tree before descending deeper.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     fluxite:\n       github: homonoidian/fluxite\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"fluxite\"\n```\n\nTODO: Write usage instructions here\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/homonoidian/fluxite/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Alexey Yurchenko](https://github.com/homonoidian) - creator and maintainer\n","program":{"html_id":"fluxite/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"fluxite","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"fluxite/Fluxite","path":"Fluxite.html","kind":"module","full_name":"Fluxite","name":"Fluxite","abstract":false,"locations":[{"filename":"src/fluxite.cr","line_number":4,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite.cr#L4"},{"filename":"src/fluxite/pipeout.cr","line_number":1,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L1"},{"filename":"src/fluxite/unit.cr","line_number":1,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L1"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"class_methods":[{"html_id":"join(*args,**kwargs)-class-method","name":"join","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs)","args_html":"(*args, **kwargs)","location":{"filename":"src/fluxite.cr","line_number":11,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite.cr#L11"},"def":{"name":"join","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"visibility":"Public","body":"Unit.join(*args, **kwargs)"}},{"html_id":"pass(*args,**kwargs)-class-method","name":"pass","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs)","args_html":"(*args, **kwargs)","location":{"filename":"src/fluxite.cr","line_number":7,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite.cr#L7"},"def":{"name":"pass","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"visibility":"Public","body":"Unit.pass(*args, **kwargs)"}},{"html_id":"port(intype:T.class)forallT-class-method","name":"port","abstract":false,"args":[{"name":"intype","external_name":"intype","restriction":"T.class"}],"args_string":"(intype : T.class) forall T","args_html":"(intype : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/fluxite.cr","line_number":15,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite.cr#L15"},"def":{"name":"port","args":[{"name":"intype","external_name":"intype","restriction":"T.class"}],"visibility":"Public","body":"Port(T).new"}},{"html_id":"port(intype:T.class,&)forallT-class-method","name":"port","abstract":false,"args":[{"name":"intype","external_name":"intype","restriction":"T.class"}],"args_string":"(intype : T.class, &) forall T","args_html":"(intype : <span class=\"t\">T</span>.<span class=\"k\">class</span>, &) forall T","location":{"filename":"src/fluxite.cr","line_number":19,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite.cr#L19"},"def":{"name":"port","args":[{"name":"intype","external_name":"intype","restriction":"T.class"}],"yields":1,"block_arity":1,"visibility":"Public","body":"yield head = Port(T).new\nhead\n"}}],"macros":[{"html_id":"has_fanout(cls)-macro","name":"has_fanout","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":""}],"args_string":"(cls)","args_html":"(cls)","location":{"filename":"src/fluxite/unit.cr","line_number":47,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L47"},"def":{"name":"has_fanout","args":[{"name":"cls","external_name":"cls","restriction":""}],"visibility":"Public","body":"    include IFanout(\n{{ cls }}\n)\n\n    @fanout = [] of IMailbox(\n{{ cls }}\n)\n\n    def connect(other : IMailbox(\n{{ cls }}\n)) : Nil\n      @fanout << other\n    \nend\n\n    def disconnect(other : IMailbox(\n{{ cls }}\n)) :  Nil\n      @fanout.delete(other)\n    \nend\n\n    def send(queue, cls : (\n{{ cls }}\n).class, object : \n{{ cls }}\n) : Nil\n      @fanout.each do |receiver|\n        queue << Message(\n{{ cls }}\n).new(self, receiver, object)\n      \nend\n    \nend\n  \n"}}],"types":[{"html_id":"fluxite/Fluxite/BaseMessage","path":"Fluxite/BaseMessage.html","kind":"struct","full_name":"Fluxite::BaseMessage","name":"BaseMessage","abstract":true,"superclass":{"html_id":"fluxite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"fluxite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"fluxite/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fluxite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fluxite/unit.cr","line_number":2,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L2"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"fluxite/Fluxite/Message","kind":"struct","full_name":"Fluxite::Message(T)","name":"Message"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/fluxite/unit.cr","line_number":2,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L2"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/fluxite/unit.cr","line_number":2,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L2"},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"fluxite/Fluxite/Cut","path":"Fluxite/Cut.html","kind":"enum","full_name":"Fluxite::Cut","name":"Cut","abstract":false,"ancestors":[{"html_id":"fluxite/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"fluxite/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"fluxite/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fluxite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fluxite/unit.cr","line_number":231,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L231"}],"repository_name":"fluxite","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"SplitPut","name":"SplitPut","value":"0"},{"id":"SplitDrop","name":"SplitDrop","value":"1"},{"id":"Put","name":"Put","value":"2"},{"id":"Drop","name":"Drop","value":"3"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"instance_methods":[{"html_id":"drop?-instance-method","name":"drop?","abstract":false,"location":{"filename":"src/fluxite/unit.cr","line_number":235,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L235"},"def":{"name":"drop?","visibility":"Public","body":"self == Drop"}},{"html_id":"put?-instance-method","name":"put?","abstract":false,"location":{"filename":"src/fluxite/unit.cr","line_number":234,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L234"},"def":{"name":"put?","visibility":"Public","body":"self == Put"}},{"html_id":"split_drop?-instance-method","name":"split_drop?","abstract":false,"location":{"filename":"src/fluxite/unit.cr","line_number":233,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L233"},"def":{"name":"split_drop?","visibility":"Public","body":"self == SplitDrop"}},{"html_id":"split_put?-instance-method","name":"split_put?","abstract":false,"location":{"filename":"src/fluxite/unit.cr","line_number":232,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L232"},"def":{"name":"split_put?","visibility":"Public","body":"self == SplitPut"}}]},{"html_id":"fluxite/Fluxite/IFanout","path":"Fluxite/IFanout.html","kind":"module","full_name":"Fluxite::IFanout(T)","name":"IFanout","abstract":false,"locations":[{"filename":"src/fluxite/unit.cr","line_number":37,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L37"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"fluxite/Fluxite/Port","kind":"class","full_name":"Fluxite::Port(T)","name":"Port"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"instance_methods":[{"html_id":"connect(other:IMailbox(T)):Nil-instance-method","name":"connect","abstract":true,"args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"args_string":"(other : IMailbox(T)) : Nil","args_html":"(other : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T)) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":39,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L39"},"def":{"name":"connect","args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"disconnect(other:IMailbox(T)):Nil-instance-method","name":"disconnect","abstract":true,"args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"args_string":"(other : IMailbox(T)) : Nil","args_html":"(other : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T)) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":40,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L40"},"def":{"name":"disconnect","args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"return_type":"Nil","visibility":"Public","body":""}},{"html_id":"send(queue,cls:T.class,object:T):Nil-instance-method","name":"send","abstract":true,"args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"cls","external_name":"cls","restriction":"T.class"},{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(queue, cls : T.class, object : T) : Nil","args_html":"(queue, cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>, object : T) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":38,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L38"},"def":{"name":"send","args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"cls","external_name":"cls","restriction":"T.class"},{"name":"object","external_name":"object","restriction":"T"}],"return_type":"Nil","visibility":"Public","body":""}}]},{"html_id":"fluxite/Fluxite/IMailbox","path":"Fluxite/IMailbox.html","kind":"module","full_name":"Fluxite::IMailbox(T)","name":"IMailbox","abstract":false,"locations":[{"filename":"src/fluxite/unit.cr","line_number":43,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L43"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"fluxite/Fluxite/Port","kind":"class","full_name":"Fluxite::Port(T)","name":"Port"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"instance_methods":[{"html_id":"receive(queue,sender:Unit,object:T):Nil-instance-method","name":"receive","abstract":true,"args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"sender","external_name":"sender","restriction":"Unit"},{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(queue, sender : Unit, object : T) : Nil","args_html":"(queue, sender : <a href=\"../Fluxite/Unit.html\">Unit</a>, object : T) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":44,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L44"},"def":{"name":"receive","args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"sender","external_name":"sender","restriction":"Unit"},{"name":"object","external_name":"object","restriction":"T"}],"return_type":"Nil","visibility":"Public","body":""}}]},{"html_id":"fluxite/Fluxite/Message","path":"Fluxite/Message.html","kind":"struct","full_name":"Fluxite::Message(T)","name":"Message","abstract":false,"superclass":{"html_id":"fluxite/Fluxite/BaseMessage","kind":"struct","full_name":"Fluxite::BaseMessage","name":"BaseMessage"},"ancestors":[{"html_id":"fluxite/Fluxite/BaseMessage","kind":"struct","full_name":"Fluxite::BaseMessage","name":"BaseMessage"},{"html_id":"fluxite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"fluxite/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"fluxite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fluxite/unit.cr","line_number":5,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L5"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"constructors":[{"html_id":"new(sender:Unit,receiver:IMailbox(T),object:T)-class-method","name":"new","abstract":false,"args":[{"name":"sender","external_name":"sender","restriction":"Unit"},{"name":"receiver","external_name":"receiver","restriction":"IMailbox(T)"},{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(sender : Unit, receiver : IMailbox(T), object : T)","args_html":"(sender : <a href=\"../Fluxite/Unit.html\">Unit</a>, receiver : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T), object : T)","location":{"filename":"src/fluxite/unit.cr","line_number":6,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L6"},"def":{"name":"new","args":[{"name":"sender","external_name":"sender","restriction":"Unit"},{"name":"receiver","external_name":"receiver","restriction":"IMailbox(T)"},{"name":"object","external_name":"object","restriction":"T"}],"visibility":"Public","body":"_ = Message(T).allocate\n_.initialize(sender, receiver, object)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"deliver(queue)-instance-method","name":"deliver","abstract":false,"args":[{"name":"queue","external_name":"queue","restriction":""}],"args_string":"(queue)","args_html":"(queue)","location":{"filename":"src/fluxite/unit.cr","line_number":9,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L9"},"def":{"name":"deliver","args":[{"name":"queue","external_name":"queue","restriction":""}],"visibility":"Public","body":"@receiver.receive(queue, @sender, @object)"}}]},{"html_id":"fluxite/Fluxite/PipeOut","path":"Fluxite/PipeOut.html","kind":"module","full_name":"Fluxite::PipeOut(T)","name":"PipeOut","abstract":false,"locations":[{"filename":"src/fluxite/pipeout.cr","line_number":1,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L1"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"fluxite/Fluxite/Port","kind":"class","full_name":"Fluxite::Port(T)","name":"Port"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"instance_methods":[{"html_id":"after(other:IFanout(U))forallU-instance-method","name":"after","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"args_string":"(other : IFanout(U)) forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U)) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":615,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L615"},"def":{"name":"after","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"visibility":"Public","body":"a, b = only(as: T | U), other.only(as: T | U)\nafter = After(T, U).new(a, b)\nb.into(after)\nafter\n"}},{"html_id":"batch(&fn:Array(T),T->Cut)-instance-method","name":"batch","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":426,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L426"},"def":{"name":"batch","yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Array(T), T -> Cut)"},"visibility":"Public","body":"into(Batch(T).new(fn))"}},{"html_id":"batch(n:Int)-instance-method","name":"batch","doc":"Emits batches of *n* incoming objects. Waits until the entire batch is\ncollected, and only then emits it. Then starts fresh from a new empty batch.\n\nThe emitted batch array is fully yours. You can read/mutate it however\nyou want.\n\n```\nxs = Fluxite::Port(Int32).new\nxs.batch(3).each { |triple| p! triple }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 3)\nFluxite.pass(xs, 4)\nFluxite.pass(xs, 5)\nFluxite.pass(xs, 6)\nFluxite.pass(xs, 7)\n\n# STDOUT:\n#   triple # => [1, 2, 3]\n#   triple # => [4, 5, 6]\n```","summary":"<p>Emits batches of <em>n</em> incoming objects.</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":"Int"}],"args_string":"(n : Int)","args_html":"(n : Int)","location":{"filename":"src/fluxite/pipeout.cr","line_number":456,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L456"},"def":{"name":"batch","args":[{"name":"n","external_name":"n","restriction":"Int"}],"visibility":"Public","body":"batch do |batch, _|\n  batch.size < n ? Cut::Put : Cut::SplitPut\nend"}},{"html_id":"before(other:IFanout(U))forallU-instance-method","name":"before","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"args_string":"(other : IFanout(U)) forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U)) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":605,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L605"},"def":{"name":"before","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"visibility":"Public","body":"a, b = only(as: T | U), other.only(as: T | U)\nbefore = Before(T, U).new(a, b)\na.into(before)\nb.into(before)\nbefore\n"}},{"html_id":"blast(&fn:T->Enumerable(U))forallU-instance-method","name":"blast","doc":"Forwards incoming objects to *fn*, emits each element from the enumerable\nreturned by *fn*.\n\n```\nxs = Fluxite::Port(String).new\nxs.blast(&.chars).squash.each { |ch| p! ch }\n\nFluxite.pass(xs, \"helloo\")\n\n# STDOUT:\n#   ch # => 'h'\n#   ch # => 'e'\n#   ch # => 'l'\n#   ch # => 'o'\n```","summary":"<p>Forwards incoming objects to <em>fn</em>, emits each element from the enumerable returned by <em>fn</em>.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":176,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L176"},"def":{"name":"blast","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> Enumerable(U))"},"visibility":"Public","body":"forward(U) do |object, feed|\n  data = fn.call(object)\n  data.each do |datum|\n    feed.call(datum)\n  end\nend"}},{"html_id":"compact_map(&fn:T->U|Nil)forallU-instance-method","name":"compact_map","doc":"Similar to `map`, but skips `.nil?` return values of *fn* (so `false`\nis still emitted).\n\n```\nxs = Fluxite::Port(Int32).new\nxs.compact_map { |x| x.even? ? \"#{x} even\" : nil }.each { |x| p! x }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 3)\nFluxite.pass(xs, 4)\n\n# STDOUT:\n#   x # => \"2 even\"\n#   x # => \"4 even\"\n```","summary":"<p>Similar to <code><a href=\"../Fluxite/PipeOut.html#map%28%26fn%3AT-%3EU%29forallU-instance-method\">#map</a></code>, but skips <code>.nil?</code> return values of <em>fn</em> (so <code>false</code> is still emitted).</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":157,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L157"},"def":{"name":"compact_map","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> U | ::Nil)"},"visibility":"Public","body":"into(CompactMap(T, U).new(fn))"}},{"html_id":"during(gate:IFanout(Bool))-instance-method","name":"during","abstract":false,"args":[{"name":"gate","external_name":"gate","restriction":"IFanout(Bool)"}],"args_string":"(gate : IFanout(Bool))","args_html":"(gate : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(Bool))","location":{"filename":"src/fluxite/pipeout.cr","line_number":596,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L596"},"def":{"name":"during","args":[{"name":"gate","external_name":"gate","restriction":"IFanout(Bool)"}],"visibility":"Public","body":"a, b = only(as: T | Bool), gate.only(as: T | Bool)\nduring = During(T).new(a, b)\nb.into(during)\nduring\n"}},{"html_id":"each(&fn:T->)-instance-method","name":"each","doc":"Attaches a terminal function *fn* which consumes data but does not emit any.\n\n```\nxs = Fluxite::Port(Int32).new\nxs.each { |x| p! x }\n\nFluxite.pass(xs, 100)\nFluxite.pass(xs, 200)\nFluxite.pass(xs, 300)\n\n# STDOUT:\n#   x # => 100\n#   x # => 200\n#   x # => 300\n```","summary":"<p>Attaches a terminal function <em>fn</em> which consumes data but does not emit any.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":50,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L50"},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T ->)"},"visibility":"Public","body":"into(Terminal(T).new(fn))"}},{"html_id":"forward(cls:U.class,&fn:T,Forward::Feed(U)->)forallU-instance-method","name":"forward","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"U.class"}],"args_string":"(cls : U.class, &fn : T, Forward::Feed(U) -> ) forall U","args_html":"(cls : <span class=\"t\">U</span>.<span class=\"k\">class</span>, &fn : T, Forward::Feed(U) -> ) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":422,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L422"},"def":{"name":"forward","args":[{"name":"cls","external_name":"cls","restriction":"U.class"}],"yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T, Forward::Feed(U) ->)"},"visibility":"Public","body":"into(Forward(T, U).new(fn))"}},{"html_id":"gate(*,byother:IFanout(Bool))-instance-method","name":"gate","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"other","external_name":"by","restriction":"IFanout(Bool)"}],"args_string":"(*, by other : IFanout(Bool))","args_html":"(*, by other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(Bool))","location":{"filename":"src/fluxite/pipeout.cr","line_number":624,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L624"},"def":{"name":"gate","args":[{"name":"","external_name":"","restriction":""},{"name":"other","external_name":"by","restriction":"IFanout(Bool)"}],"splat_index":0,"visibility":"Public","body":"a, b = only(as: T | Bool), other.only(as: T | Bool)\ngate = Gate(T).new(a, b)\na.into(gate)\nb.into(gate)\ngate\n"}},{"html_id":"into(other:IFanout(U),ascls:U.class):selfforallU-instance-method","name":"into","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"},{"name":"cls","external_name":"as","restriction":"U.class"}],"args_string":"(other : IFanout(U), as cls : U.class) : self forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U), as cls : <span class=\"t\">U</span>.<span class=\"k\">class</span>) : <span class=\"k\">self</span> forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":20,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L20"},"def":{"name":"into","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"},{"name":"cls","external_name":"as","restriction":"U.class"}],"return_type":"self","visibility":"Public","body":"(map(cls)).into(other)\nself\n"}},{"html_id":"into(other:IMailbox(T))-instance-method","name":"into","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"args_string":"(other : IMailbox(T))","args_html":"(other : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T))","location":{"filename":"src/fluxite/pipeout.cr","line_number":2,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L2"},"def":{"name":"into","args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"visibility":"Public","body":"Unit.connect(self, to: other)"}},{"html_id":"into(other:IMailbox(U))forallU-instance-method","name":"into","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IMailbox(U)"}],"args_string":"(other : IMailbox(U)) forall U","args_html":"(other : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(U)) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":6,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L6"},"def":{"name":"into","args":[{"name":"other","external_name":"other","restriction":"IMailbox(U)"}],"visibility":"Public","body":"{% if U.union? && (U.union_types.includes?(T)) %}{% else %}\n        {% raise(\"into: expected mailbox for #{T} or a union that includes #{T}, found something else instead: #{U}\") %}\n      {% end %}\n(only(U)).into(other)\n"}},{"html_id":"into(other:IFanout(U),&fn:T->U):selfforallU-instance-method","name":"into","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"args_string":"(other : IFanout(U), &fn : T -> U) : self forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U), &fn : T -> U) : <span class=\"k\">self</span> forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":14,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L14"},"def":{"name":"into","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> U)"},"return_type":"self","visibility":"Public","body":"map(&fn).into(other)\nself\n"}},{"html_id":"into(&fn:T->Enumerable(IMailbox(T))):Nil-instance-method","name":"into","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":26,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L26"},"def":{"name":"into","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> Enumerable(IMailbox(T)))"},"return_type":"Nil","visibility":"Public","body":"forward(T) do |datum, feed|\n  receivers = fn.call(datum)\n  receivers.each do |receiver|\n    feed.call(receiver, datum)\n  end\nend"}},{"html_id":"map(&fn:T->U)forallU-instance-method","name":"map","doc":"Emits data transformed using *fn*.\n\n```\nxs = Port(Int32).new\nxs.map(&.chr).each { |ch| p! ch }\n\nFluxite.pass(xs, 100)\nFluxite.pass(xs, 102)\nFluxite.pass(xs, 103)\n\n# STDOUT:\n#   ch # => 'd'\n#   ch # => 'f'\n#   ch # => 'g'\n```","summary":"<p>Emits data transformed using <em>fn</em>.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":69,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L69"},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> U)"},"visibility":"Public","body":"into(Map(T, U).new(fn))"}},{"html_id":"map(cls:U.class)forallU-instance-method","name":"map","doc":"If `U.class` responds to `[]` (treated as a smart constructor), calls `U[object]`,\notherwise, calls `U.new(object)`, where *object* is each incoming object. Emits\nthe resulting instances of `U`.\n\n```\nclass Var\n  def initialize(@id : UInt32)\n  end\nend\n\nxs = Fluxite::Port(UInt32).new\nxs.each { |x| p! x }\nxs.map(Var).each { |var| p! var }\n\nFluxite.pass(xs, 100u32)\nFluxite.pass(xs, 200u32)\nFluxite.pass(xs, 300u32)\n\n# STDOUT:\n#   x   # => 100\n#   var # => #<Var:0x7f273ed30e70 @id=100>\n#   x   # => 200\n#   var # => #<Var:0x7f273ed30e60 @id=200>\n#   x   # => 300\n#   var # => #<Var:0x7f273ed30e50 @id=300>\n```","summary":"<p>If <code>U.class</code> responds to <code>[]</code> (treated as a smart constructor), calls <code>U[object]</code>, otherwise, calls <code>U.new(object)</code>, where <em>object</em> is each incoming object.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"U.class"}],"args_string":"(cls : U.class) forall U","args_html":"(cls : <span class=\"t\">U</span>.<span class=\"k\">class</span>) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":99,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L99"},"def":{"name":"map","args":[{"name":"cls","external_name":"cls","restriction":"U.class"}],"visibility":"Public","body":"map do |object|\n  {% if U.class.has_method?(:[]) %}\n        U[object]\n      {% else %}\n        U.new(object)\n      {% end %}\nend"}},{"html_id":"map(*layout:*U)forallU-instance-method","name":"map","doc":"Similar to `map(cls : U.class)`, but performs elementwise conversion as\ndescribed by *layout*.\n\n```\nrecord Foo, x : Int32\nrecord Bar, x : String\nrecord Baz, x : Bool\n\nxs = Fluxite::Port({Int32, String, Bool}).new\nxs.map(Foo, Bar, Baz).each { |ys| p! ys }\n\nFluxite.pass(xs, {100, \"hello\", true})\nFluxite.pass(xs, {200, \"world\", false})\n\n# STDOUT:\n#   ys # => {Foo(@x=100), Bar(@x=\"hello\"), Baz(@x=true)}\n#   ys # => {Foo(@x=200), Bar(@x=\"world\"), Baz(@x=false)}\n```","summary":"<p>Similar to <code><a href=\"../Fluxite/PipeOut.html#map%28cls%3AU.class%29forallU-instance-method\">#map(cls : U.class)</a></code>, but performs elementwise conversion as described by <em>layout</em>.</p>","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"*U"}],"args_string":"(*layout : *U) forall U","args_html":"(*layout : <span class=\"o\">*</span><span class=\"t\">U</span>) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":127,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L127"},"def":{"name":"map","args":[{"name":"layout","external_name":"layout","restriction":"*U"}],"splat_index":0,"visibility":"Public","body":"{% if true %}\n        map do |tuple|\n          { {% for cls, index in U %}\n              {% if cls.has_method?(:[]) %}\n                {{ cls.instance }}[tuple[{{ index }}]],\n              {% else %}\n                {{ cls.instance }}.new(tuple[{{ index }}]),\n              {% end %}\n            {% end %} }\n        end\n      {% end %}"}},{"html_id":"only(*args,**kwargs,&fn:T->Bool)-instance-method","name":"only","doc":"Alias of `select` for when you cannot use `select` (as it is a Crystal keyword).","summary":"<p>Alias of <code><a href=\"../Fluxite/PipeOut.html#select%28%26fn%3AT-%3EBool%29-instance-method\">#select</a></code> for when you cannot use <code><a href=\"../Fluxite/PipeOut.html#select%28%26fn%3AT-%3EBool%29-instance-method\">#select</a></code> (as it is a Crystal keyword).</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs, &fn : T -> Bool)","args_html":"(*args, **kwargs, &fn : T -> Bool)","location":{"filename":"src/fluxite/pipeout.cr","line_number":269,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L269"},"def":{"name":"only","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> Bool)"},"visibility":"Public","body":"self.select(*args, **kwargs, &fn)"}},{"html_id":"only(*args,**kwargs)-instance-method","name":"only","doc":"Alias of `select` for when you cannot use `select` (as it is a Crystal keyword).","summary":"<p>Alias of <code><a href=\"../Fluxite/PipeOut.html#select%28%26fn%3AT-%3EBool%29-instance-method\">#select</a></code> for when you cannot use <code><a href=\"../Fluxite/PipeOut.html#select%28%26fn%3AT-%3EBool%29-instance-method\">#select</a></code> (as it is a Crystal keyword).</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs)","args_html":"(*args, **kwargs)","location":{"filename":"src/fluxite/pipeout.cr","line_number":274,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L274"},"def":{"name":"only","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"visibility":"Public","body":"self.select(*args, **kwargs)"}},{"html_id":"or(other:IFanout(U))forallU-instance-method","name":"or","doc":"Combines emission of `self` and *other*.\n\n```\nxs = Fluxite::Port(Symbol).new\nys = Fluxite::Port(Int32).new\n\nxs.or(ys).each { |common| p! common }\n\nFluxite.pass(xs, :foo)\nFluxite.pass(ys, 200)\nFluxite.pass(ys, 300)\nFluxite.pass(xs, :bar)\n\n# STDOUT:\n#   common # => :foo\n#   common # => 200\n#   common # => 300\n#   common # => :bar\n```","summary":"<p>Combines emission of <code>self</code> and <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"args_string":"(other : IFanout(U)) forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U)) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":412,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L412"},"def":{"name":"or","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"visibility":"Public","body":"a, b = only(as: T | U), other.only(as: T | U)\nport = Port(T | U).new\na.into(port)\nb.into(port)\nport\n"}},{"html_id":"partition(&fn:T->Bool)-instance-method","name":"partition","doc":"Creates and returns two ports, *yay* and *nay*, redirecting those objects\nfor which *fn* returns `true` to *yay*; and those objects for which *fn*\nreturns `false` to *nay*.\n\n```\nxs = Fluxite::Port(Int32).new\neven, odd = xs.partition(&.even?)\neven.each { |even| p! even }\nodd.each { |odd| p! odd }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 3)\nFluxite.pass(xs, 4)\n\n# STDOUT:\n#   odd # => 1\n#   even # => 2\n#   odd # => 3\n#   even # => 4\n```","summary":"<p>Creates and returns two ports, <em>yay</em> and <em>nay</em>, redirecting those objects for which <em>fn</em> returns <code>true</code> to <em>yay</em>; and those objects for which <em>fn</em> returns <code>false</code> to <em>nay</em>.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":384,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L384"},"def":{"name":"partition","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> Bool)"},"visibility":"Public","body":"yay = Port(T).new\nnay = Port(T).new\ninto(Partition(T).new(fn, yay, nay))\n{yay, nay}\n"}},{"html_id":"reject(&fn:T->Bool)-instance-method","name":"reject","doc":"Emits only those incoming objects for which *fn* returns `false`.\n\n```\nxs = Fluxite::Port(Int32).new\nxs.reject(&.even?).each { |odd| p! odd }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 3)\nFluxite.pass(xs, 4)\n\n# STDOUT:\n#   odd # => 1\n#   odd # => 3\n```","summary":"<p>Emits only those incoming objects for which <em>fn</em> returns <code>false</code>.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":258,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L258"},"def":{"name":"reject","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> Bool)"},"visibility":"Public","body":"self.select do |object|\n  !(fn.call(object))\nend"}},{"html_id":"reject(pattern)-instance-method","name":"reject","doc":"Emits only those incoming objects that compare *not* equal to the given\n*pattern*. Equality is tested using `===`.","summary":"<p>Emits only those incoming objects that compare <em>not</em> equal to the given <em>pattern</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":""}],"args_string":"(pattern)","args_html":"(pattern)","location":{"filename":"src/fluxite/pipeout.cr","line_number":264,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L264"},"def":{"name":"reject","args":[{"name":"pattern","external_name":"pattern","restriction":""}],"visibility":"Public","body":"self.select do |object|\n  !(pattern === object)\nend"}},{"html_id":"select(&fn:T->Bool)-instance-method","name":"select","doc":"Emits only those incoming objects for which *fn* returns `true`.\n\n```\nxs = Fluxite::Port(Int32).new\nxs.select(&.even?).each { |even| p! even }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 3)\nFluxite.pass(xs, 4)\n\n# STDOUT:\n#   even # => 2\n#   even # => 4\n```\n\nSee also: `only`.","summary":"<p>Emits only those incoming objects for which <em>fn</em> returns <code>true</code>.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":202,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L202"},"def":{"name":"select","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> Bool)"},"visibility":"Public","body":"into(Select(T).new(fn))"}},{"html_id":"select(ascls:U.class)forallU-instance-method","name":"select","doc":"Emits incoming objects of type `U`, casting them to type `U`. This method\nis particularly useful to narrow down a union type. If type cast is impossible\nthe incoming object is ignored.\n\n```\nxs = Fluxite::Port(Symbol | String | Int32).new\nxs.select(Symbol).each { |sym| p! sym }\nxs.select(String).each { |str| p! str }\nxs.select(Int32).each { |int| p! int }\n\nFluxite.pass(xs, 100)\nFluxite.pass(xs, :hello)\nFluxite.pass(xs, \"world\")\n\n# STDOUT:\n#   int # => 100\n#   sym # => :hello\n#   str # => \"world\"\n```\n\nSee also: `only`.","summary":"<p>Emits incoming objects of type <code>U</code>, casting them to type <code>U</code>.</p>","abstract":false,"args":[{"name":"cls","external_name":"as","restriction":"U.class"}],"args_string":"(as cls : U.class) forall U","args_html":"(as cls : <span class=\"t\">U</span>.<span class=\"k\">class</span>) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":227,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L227"},"def":{"name":"select","args":[{"name":"cls","external_name":"as","restriction":"U.class"}],"visibility":"Public","body":"{% if T == U %}\n      self\n    {% else %}\n      into SelectAs(T, U).new\n    {% end %}"}},{"html_id":"select(pattern)-instance-method","name":"select","doc":"Emits only those incoming objects that compare equal to the given *pattern*.\nEquality is tested using `===`.\n\nSee also: `only`.","summary":"<p>Emits only those incoming objects that compare equal to the given <em>pattern</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":""}],"args_string":"(pattern)","args_html":"(pattern)","location":{"filename":"src/fluxite/pipeout.cr","line_number":239,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L239"},"def":{"name":"select","args":[{"name":"pattern","external_name":"pattern","restriction":""}],"visibility":"Public","body":"self.select do |object|\n  pattern === object\nend"}},{"html_id":"squash(initial:T,&fn:T,T->Bool)-instance-method","name":"squash","doc":"Emits an incoming object if it is different from the preceding object.\nOptionally, the *initial* predecessor may be provided. In such case, the\nfirst incoming object is compared with *initial*. Otherwise, the first\nobject is always emitted.\n\nEquality of two objects is determined using *fn*.\n\n```\nmax = nil\n\nxs = Fluxite::Port(Int32).new\nxs.squash { |x, y| x >= y }.each { |n| max = n }\n\n(-100..100).to_a.shuffle!.each do |n|\n  Fluxite.pass(xs, n)\nend\n\nmax # => 100\n```","summary":"<p>Emits an incoming object if it is different from the preceding object.</p>","abstract":false,"args":[{"name":"initial","external_name":"initial","restriction":"T"}],"args_string":"(initial : T, &fn : T, T -> Bool)","args_html":"(initial : T, &fn : T, T -> Bool)","location":{"filename":"src/fluxite/pipeout.cr","line_number":297,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L297"},"def":{"name":"squash","args":[{"name":"initial","external_name":"initial","restriction":"T"}],"yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T, T -> Bool)"},"visibility":"Public","body":"into(Squash(T).new(initial, fn))"}},{"html_id":"squash(&fn:T,T->Bool)-instance-method","name":"squash","doc":"Emits an incoming object if it is different from the preceding object.\nOptionally, the *initial* predecessor may be provided. In such case, the\nfirst incoming object is compared with *initial*. Otherwise, the first\nobject is always emitted.\n\nEquality of two objects is determined using *fn*.\n\n```\nmax = nil\n\nxs = Fluxite::Port(Int32).new\nxs.squash { |x, y| x >= y }.each { |n| max = n }\n\n(-100..100).to_a.shuffle!.each do |n|\n  Fluxite.pass(xs, n)\nend\n\nmax # => 100\n```","summary":"<p>Emits an incoming object if it is different from the preceding object.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":302,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L302"},"def":{"name":"squash","yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T, T -> Bool)"},"visibility":"Public","body":"into(Squash(T).new(fn))"}},{"html_id":"squash(*args,**kwargs)-instance-method","name":"squash","doc":"Emits an incoming object if it is different from the preceding one.\n\nThe objects are compared using `==`.\n\n```\nxs = Fluxite::Port(Int32).new\nxs.squash.each { |x| p! x }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 3)\nFluxite.pass(xs, 2)\n\n# STDOUT:\n#   x # => 1\n#   x # => 2\n#   x # => 3\n#   x # => 2\n```","summary":"<p>Emits an incoming object if it is different from the preceding one.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs)","args_html":"(*args, **kwargs)","location":{"filename":"src/fluxite/pipeout.cr","line_number":359,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L359"},"def":{"name":"squash","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"visibility":"Public","body":"squash_by(*args, **kwargs, &.itself)"}},{"html_id":"squash_by(initial:U,&fn:T->U)forallU-instance-method","name":"squash_by","doc":"Emits an incoming object if its return value of *fn* is different from that\nproduced by the preceding object. Optionally, the *initial* value of *fn*\nmay be provided. In such case, the first incoming object is compared with\nthat value. Otherwise, the first object is always emitted.\n\n```\n# Do not emit consecutive even numbers.\nxs = Fluxite::Port(Int32).new\nxs.squash_by(&.even?).each { |x| p! x }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 4)\nFluxite.pass(xs, 5)\nFluxite.pass(xs, 6)\nFluxite.pass(xs, 7)\n\n# STDOUT:\n#   x # => 1\n#   x # => 2\n#   x # => 5\n#   x # => 6\n#   x # => 7\n```","summary":"<p>Emits an incoming object if its return value of <em>fn</em> is different from that produced by the preceding object.</p>","abstract":false,"args":[{"name":"initial","external_name":"initial","restriction":"U"}],"args_string":"(initial : U, &fn : T -> U) forall U","args_html":"(initial : U, &fn : T -> U) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":330,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L330"},"def":{"name":"squash_by","args":[{"name":"initial","external_name":"initial","restriction":"U"}],"yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> U)"},"visibility":"Public","body":"into(SquashBy(T, U).new(initial, fn))"}},{"html_id":"squash_by(&fn:T->U)forallU-instance-method","name":"squash_by","doc":"Emits an incoming object if its return value of *fn* is different from that\nproduced by the preceding object. Optionally, the *initial* value of *fn*\nmay be provided. In such case, the first incoming object is compared with\nthat value. Otherwise, the first object is always emitted.\n\n```\n# Do not emit consecutive even numbers.\nxs = Fluxite::Port(Int32).new\nxs.squash_by(&.even?).each { |x| p! x }\n\nFluxite.pass(xs, 1)\nFluxite.pass(xs, 2)\nFluxite.pass(xs, 4)\nFluxite.pass(xs, 5)\nFluxite.pass(xs, 6)\nFluxite.pass(xs, 7)\n\n# STDOUT:\n#   x # => 1\n#   x # => 2\n#   x # => 5\n#   x # => 6\n#   x # => 7\n```","summary":"<p>Emits an incoming object if its return value of <em>fn</em> is different from that produced by the preceding object.</p>","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":335,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L335"},"def":{"name":"squash_by","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(T -> U)"},"visibility":"Public","body":"into(SquashBy(T, U).new(fn))"}},{"html_id":"track(other:IFanout(U),default:U)forallU-instance-method","name":"track","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"},{"name":"default","external_name":"default","restriction":"U"}],"args_string":"(other : IFanout(U), default : U) forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U), default : U) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":465,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L465"},"def":{"name":"track","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"},{"name":"default","external_name":"default","restriction":"U"}],"visibility":"Public","body":"a, b = only(as: T | U), other.only(as: T | U)\ntrack = Track(T, U).new(default, a, b)\na.into(track)\nb.into(track)\ntrack\n"}},{"html_id":"track(other:IFanout(U))forallU-instance-method","name":"track","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"args_string":"(other : IFanout(U)) forall U","args_html":"(other : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(U)) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":475,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L475"},"def":{"name":"track","args":[{"name":"other","external_name":"other","restriction":"IFanout(U)"}],"visibility":"Public","body":"a, b = only(as: T | U), other.only(as: T | U)\ntrack = Track(T, U).new(a, b)\na.into(track)\nb.into(track)\ntrack\n"}},{"html_id":"track(*layout:*U)forallU-instance-method","name":"track","doc":"Tracks multiple values simultaneously as described by *layout*.\n\nRemember: tracking is for when you have a master pipeout and a few pipeouts that\nthe master's emission should be combined with, and you want to know their most up\nto date values. In other words, `track` quietly tracks the pipeouts, and emits when\nthe master pipeout emits.\n\nLayout can feature any combination of the following:\n\n- A pipeout of any type (e.g. `track(xs.select(&.even?), ys.reject(&.odd?))`)\n- A spec for a pipeout with a default value (e.g. `track({ from: xs.select(&.even?), default: 2 }, { from: ys.select(&.odd?), default: 3 })`)\n- A spec for a pipeout without a default value (e.g. `track({ from: xs.select(&.even?) }, { from: ys.select(&.odd?) })`),\n  allowed mostly for consistency (when some pipeouts have defaults and some don't, it's\n  recommended to use this form).\n\nUsing raw pipeout (will have to wait until all of age, profession arrive):\n\n```\nnames = Fluxite::Port(String).new\nages = Fluxite::Port(Int32).new\nprofessions = Fluxite::Port(String).new\n\nnames\n  .track(ages, professions)\n  .each { |name, age, profession| p!({ name, age, profession})  }\n\nFluxite.pass(ages, 25)\nFluxite.pass(names, \"John Doe\")\nFluxite.pass(professions, \"programmer\")\n\n# STDOUT:\n#   {name, age, profession} # => {\"John Doe\", 25, \"programmer\"}\n\nFluxite.pass(profession, \"gardener\")\nFluxite.pass(age, 32)\n\n# Prints nothing. `age` and `profession` are quietly tracked by `name`,\n# to get their freshest values when `name` changes.\n\nFluxite.pass(names, \"Susan Doe\")\n\n# STDOUT:\n#   {name, age, profession} # => {\"Susan Doe\", 32, \"gardener\"}\n```\n\nSpecifying a default value to be used before a tracked pipeout emits:\n\n```\nnames = Fluxite::Port(String).new\nages = Fluxite::Port(Int32).new\nprofessions = Fluxite::Port(String).new\n\nnames\n  .track(ages, { from: professions, default: \"unspecified\" })\n  .each { |name, age, profession| p!({ name, age, profession})  }\n\n# For consistency you may write the above as:\n# name\n#   .track(\n#     { from: ages },\n#     { from: professions, default: \"unspecified\" })\n#   .each { |name, age, profession| p!({ name, age, profession })\n\nFluxite.pass(ages, 25)\nFluxite.pass(names, \"John Doe\")\n\n# STDOUT:\n#   {name, age, profession} # => {\"John Doe\", 25, \"unspecified\"}\n\nFluxite.pass(professions, \"writer\")\n\n# Again, prints nothing. We've used the default value. Now a new `name`\n# must arrive before we register the new profession.\n\nFluxite.pass(names, \"Mark Stephenson\")\n\n# STDOUT:\n#   {name, age, profession} # => {\"Mark Stephenson\", 25, \"writer\"}\n```","summary":"<p>Tracks multiple values simultaneously as described by <em>layout</em>.</p>","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"*U"}],"args_string":"(*layout : *U) forall U","args_html":"(*layout : <span class=\"o\">*</span><span class=\"t\">U</span>) forall U","location":{"filename":"src/fluxite/pipeout.cr","line_number":586,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L586"},"def":{"name":"track","args":[{"name":"layout","external_name":"layout","restriction":"*U"}],"splat_index":0,"visibility":"Public","body":"source = self\n{% for cls, index in U %}\n      source = source.track(**normtrack(layout[{{ index }}]))\n    {% end %}\nsource.map do |tuple|\n  bitake(tuple, {{ U.size + 1 }})\nend\n"}},{"html_id":"up_to(&fn:Array(T),T->Cut)-instance-method","name":"up_to","abstract":false,"location":{"filename":"src/fluxite/pipeout.cr","line_number":430,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L430"},"def":{"name":"up_to","yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Array(T), T -> Cut)"},"visibility":"Public","body":"into(UpTo(T).new(fn))"}},{"html_id":"up_to(n:Int)-instance-method","name":"up_to","doc":"Emits up to *n* incoming objects.","summary":"<p>Emits up to <em>n</em> incoming objects.</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":"Int"}],"args_string":"(n : Int)","args_html":"(n : Int)","location":{"filename":"src/fluxite/pipeout.cr","line_number":461,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/pipeout.cr#L461"},"def":{"name":"up_to","args":[{"name":"n","external_name":"n","restriction":"Int"}],"visibility":"Public","body":"up_to do |batch, _|\n  batch.size < n ? Cut::Put : Cut::SplitPut\nend"}}]},{"html_id":"fluxite/Fluxite/Port","path":"Fluxite/Port.html","kind":"class","full_name":"Fluxite::Port(T)","name":"Port","abstract":false,"superclass":{"html_id":"fluxite/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"fluxite/Fluxite/IFanout","kind":"module","full_name":"Fluxite::IFanout","name":"IFanout"},{"html_id":"fluxite/Fluxite/PipeOut","kind":"module","full_name":"Fluxite::PipeOut","name":"PipeOut"},{"html_id":"fluxite/Fluxite/IMailbox","kind":"module","full_name":"Fluxite::IMailbox","name":"IMailbox"},{"html_id":"fluxite/Fluxite/Unit","kind":"module","full_name":"Fluxite::Unit","name":"Unit"},{"html_id":"fluxite/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"fluxite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/fluxite/unit.cr","line_number":67,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L67"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"fluxite/Fluxite/IFanout","kind":"module","full_name":"Fluxite::IFanout","name":"IFanout"},{"html_id":"fluxite/Fluxite/IMailbox","kind":"module","full_name":"Fluxite::IMailbox","name":"IMailbox"},{"html_id":"fluxite/Fluxite/PipeOut","kind":"module","full_name":"Fluxite::PipeOut","name":"PipeOut"},{"html_id":"fluxite/Fluxite/Unit","kind":"module","full_name":"Fluxite::Unit","name":"Unit"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"instance_methods":[{"html_id":"connect(other:IMailbox(T)):Nil-instance-method","name":"connect","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"args_string":"(other : IMailbox(T)) : Nil","args_html":"(other : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T)) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":72,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L72"},"def":{"name":"connect","args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"return_type":"Nil","visibility":"Public","body":"@fanout << other"}},{"html_id":"disconnect(other:IMailbox(T)):Nil-instance-method","name":"disconnect","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"args_string":"(other : IMailbox(T)) : Nil","args_html":"(other : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T)) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":72,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L72"},"def":{"name":"disconnect","args":[{"name":"other","external_name":"other","restriction":"IMailbox(T)"}],"return_type":"Nil","visibility":"Public","body":"@fanout.delete(other)"}},{"html_id":"receive(queue,sender:Unit,object:T):Nil-instance-method","name":"receive","abstract":false,"args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"sender","external_name":"sender","restriction":"Unit"},{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(queue, sender : Unit, object : T) : Nil","args_html":"(queue, sender : <a href=\"../Fluxite/Unit.html\">Unit</a>, object : T) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":74,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L74"},"def":{"name":"receive","args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"sender","external_name":"sender","restriction":"Unit"},{"name":"object","external_name":"object","restriction":"T"}],"return_type":"Nil","visibility":"Public","body":"send(queue, T, object)"}},{"html_id":"send(queue,cls:T.class,object:T):Nil-instance-method","name":"send","abstract":false,"args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"cls","external_name":"cls","restriction":"T.class"},{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(queue, cls : T.class, object : T) : Nil","args_html":"(queue, cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>, object : T) : Nil","location":{"filename":"src/fluxite/unit.cr","line_number":72,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L72"},"def":{"name":"send","args":[{"name":"queue","external_name":"queue","restriction":""},{"name":"cls","external_name":"cls","restriction":"T.class"},{"name":"object","external_name":"object","restriction":"T"}],"return_type":"Nil","visibility":"Public","body":"@fanout.each do |receiver|\n  queue << (Message(T).new(self, receiver, object))\nend"}}]},{"html_id":"fluxite/Fluxite/Unit","path":"Fluxite/Unit.html","kind":"module","full_name":"Fluxite::Unit","name":"Unit","abstract":false,"locations":[{"filename":"src/fluxite/unit.cr","line_number":14,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L14"}],"repository_name":"fluxite","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"fluxite/Fluxite/Port","kind":"class","full_name":"Fluxite::Port(T)","name":"Port"}],"namespace":{"html_id":"fluxite/Fluxite","kind":"module","full_name":"Fluxite","name":"Fluxite"},"class_methods":[{"html_id":"connect(a:IFanout(T),*,tob:IMailbox(T))forallT-class-method","name":"connect","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"IFanout(T)"},{"name":"","external_name":"","restriction":""},{"name":"b","external_name":"to","restriction":"IMailbox(T)"}],"args_string":"(a : IFanout(T), *, to b : IMailbox(T)) forall T","args_html":"(a : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(T), *, to b : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T)) forall T","location":{"filename":"src/fluxite/unit.cr","line_number":19,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L19"},"def":{"name":"connect","args":[{"name":"a","external_name":"a","restriction":"IFanout(T)"},{"name":"","external_name":"","restriction":""},{"name":"b","external_name":"to","restriction":"IMailbox(T)"}],"splat_index":1,"visibility":"Public","body":"a.connect(b)\nb\n"}},{"html_id":"disconnect(b:IMailbox(T),*,froma:IFanout(T))forallT-class-method","name":"disconnect","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"IMailbox(T)"},{"name":"","external_name":"","restriction":""},{"name":"a","external_name":"from","restriction":"IFanout(T)"}],"args_string":"(b : IMailbox(T), *, from a : IFanout(T)) forall T","args_html":"(b : <a href=\"../Fluxite/IMailbox.html\">IMailbox</a>(T), *, from a : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(T)) forall T","location":{"filename":"src/fluxite/unit.cr","line_number":24,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L24"},"def":{"name":"disconnect","args":[{"name":"b","external_name":"b","restriction":"IMailbox(T)"},{"name":"","external_name":"","restriction":""},{"name":"a","external_name":"from","restriction":"IFanout(T)"}],"splat_index":1,"visibility":"Public","body":"a.disconnect(b)\na\n"}},{"html_id":"join(*units)-class-method","name":"join","abstract":false,"args":[{"name":"units","external_name":"units","restriction":""}],"args_string":"(*units)","args_html":"(*units)","location":{"filename":"src/fluxite/unit.cr","line_number":15,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L15"},"def":{"name":"join","args":[{"name":"units","external_name":"units","restriction":""}],"splat_index":0,"visibility":"Public","body":"units.reduce do |common, unit|\n  common.or(unit)\nend"}},{"html_id":"pass(unit:IFanout(T),object:T):NilforallT-class-method","name":"pass","abstract":false,"args":[{"name":"unit","external_name":"unit","restriction":"IFanout(T)"},{"name":"object","external_name":"object","restriction":"T"}],"args_string":"(unit : IFanout(T), object : T) : Nil forall T","args_html":"(unit : <a href=\"../Fluxite/IFanout.html\">IFanout</a>(T), object : T) : Nil forall T","location":{"filename":"src/fluxite/unit.cr","line_number":29,"url":"https://github.com/homonoidian/fluxite/blob/c018b2484c1c41f78d4092f4287ad9d15a34dd87/src/fluxite/unit.cr#L29"},"def":{"name":"pass","args":[{"name":"unit","external_name":"unit","restriction":"IFanout(T)"},{"name":"object","external_name":"object","restriction":"T"}],"return_type":"Nil","visibility":"Public","body":"queue = Deque(BaseMessage) {Message(T).new(unit, unit, object)}\nwhile message = queue.shift?\n  message.deliver(queue)\nend\n"}}]}]}]}})